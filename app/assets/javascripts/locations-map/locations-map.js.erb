/**
 * Map Location
 */

var osmUrl = "https://osm.cdsh.dev/hot/{z}/{x}/{y}.png";
var nominatimUrl = "https://nominatim.cdsh.dev";

var loadingAddressText = "Wczytywanie adresu...";

var locations = {};
var markers = {};
var markersLimit = 1;

// set map
var map = L.map("map", {
  minZoom: 10,
  maxZoom: 15,
  gestureHandling: true
}).setView([52.22977, 21.01178], 11);

$('#map').removeAttr('tabIndex');

L.tileLayer(osmUrl, {
  attribution:
    '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

// icons
var BOLeafIcon = L.Icon.extend({
  options: {
    iconUrl:       <%= "'#{asset_path("locations-map/images/marker-icon.png")}'" %>,
    iconRetinaUrl: <%= "'#{asset_path("locations-map/images/marker-icon-2x.png")}'" %>,
    shadowUrl:     <%= "'#{asset_path("locations-map/images/marker-shadow.png")}'" %>,
    iconSize:    [25, 41],
    iconAnchor:  [12, 41],
    popupAnchor: [1, -34],
    tooltipAnchor: [16, -28],
    shadowSize:  [41, 41]
  },
  _getIconUrl: function (name) {
    return L.Icon.prototype._getIconUrl.call(this, name);
  }
});
var mapIcon = new BOLeafIcon();

map.on("click", addMarker);

var project_locations = JSON.parse($('#all_locations').val());

if (!$.isEmptyObject(project_locations)) {
  var bounds = [];
  $.each(project_locations, function(k, v) {
    addMarker({
      latlng: {
        lat: v.lat,
        lng: v.lng
      },
      display_name: v.display_name,
      address: v.address
    }, k);
    bounds.push([v.lat, v.lng]);
  });

  map.fitBounds(bounds, { animate: false });
}

var inputNewLocation = $('#location-input-new');
var inputAddLocation = $('#location-input-add');

inputNewLocation.on('keypress', function (e) {
  var keycode = (e.keyCode ? e.keyCode : e.which);
  if (keycode == '13') addNewLocation();
});

// add marker
function addMarker(e, id = Date.now()) {
  if (Object.keys(locations).length === markersLimit) return;
  
  locations[id] = {
    lat: e.latlng.lat,
    lng: e.latlng.lng,
    display_name: e.display_name || null,
    address: e.address || null,
  };

  var addressText = e.display_name || loadingAddressText;

  markers[id] = new L.marker(e.latlng, {
    draggable: true,
    icon: mapIcon
  })
    .addTo(map)
    .bindPopup(addressText);

  $('.locations').append(`<p>
    <input type="text" readonly id="input-location-${id}" value="${addressText}" class="added-marker" /> 
    <input type="button" id="location-delete-${id}" value="usuń pinezkę" />
  </p>`);

  $(`#location-delete-${id}`).click(() => {
    removeLocation(id);
  });

  geocodeLatLng(id, e.address == null);
  markerEvents(id);

  serializeLocations();

  // hide input (only one value allowed)
  // $('#search').hide();
  $('.auto-search-wrapper').hide();
}

// set marker events
function markerEvents(id) {
  // click
  markers[id].on('click', function (e) {
    var popup = e.target.getPopup();
    popup.setContent(locations[id].display_name);
  });
  
  // drag
  markers[id].on("dragend", function (e) {
    locations[id].lat = e.target.getLatLng().lat;
    locations[id].lng = e.target.getLatLng().lng
  
    geocodeLatLng(id);
  });
}

// gecode LatLng
function geocodeLatLng(id, geocode = true) {
  if (geocode) {
    $.getJSON(`${nominatimUrl}/reverse?format=json&lat=${locations[id].lat}&lon=${locations[id].lng}&addressdetails=1`, function(json) {
      locations[id].display_name = prepareDisplayName(json);
      locations[id].address = json.address;
      locations[id].postcode = json.address.postcode;

      serializeLocations();

      $(`#input-location-${id}`).val(locations[id].display_name);
    });
  }
}

// prepare display name
function prepareDisplayName(obj) {
  return `${obj.address.road || ''} ${obj.address.house_number || ''}, ${obj.address.postcode || ''} ${obj.address.city || ''}`;
}

// change input value
function changeInputValue(id) {
  var input = $(`#input-location-${id}`);
  input.parent().find('input.change').prop('disabled', locations[id].display_name.trim() === input.val().trim());
}

// remove location
function removeLocation(id) {
  map.removeLayer(markers[id]);
  delete markers[id];
  delete locations[id];
  
  $(`#input-location-${id}`).parent().remove();

  serializeLocations();

  // show search field again
  // $('#search').show();
  $('.auto-search-wrapper').show();
}

function serializeLocations() {
  $('#all_locations').val(JSON.stringify(locations));
}

// autocomplete
new Autocomplete("search", {
  // default selects the first item in
  // the list of results
  selectFirst: true,

  // The number of characters entered should start searching
  howManyCharacters: 5,

  // onSearch
  onSearch: ({ currentValue }) => {
    // You can also use static files
    // const api = '../static/search.json'
    const api = `${nominatimUrl}/search?format=geojson&limit=5&addressdetails=1&countrycodes=pl&city=Warszawa&street=${encodeURI(
      currentValue
    )}`;

    return new Promise((resolve) => {
      fetch(api)
        .then((response) => response.json())
        .then((data) => {
          resolve(data.features);
        })
        .catch((error) => {
          console.error(error);
        });
    });
  },
  // nominatim GeoJSON format parse this part turns json into the list of
  // records that appears when you type.
  onResults: ({ currentValue, matches, template }) => {
    const regex = new RegExp(currentValue, "gi");

    // if the result returns 0 we
    // show the no results element
    return matches === 0
      ? template
      : matches
          .map((element) => {
            // const display_name = prepareDisplayName(element.properties);
            return `
          <li class="loupe">
            <p>
              ${element.properties.display_name.replace(
                regex,
                (str) => `<b>${str}</b>`
              )}
            </p>
          </li> `;
          })
          .join("");
  },

  // we add an action to enter or click
  onSubmit: ({ object, element }) => {
    const { display_name, address } = object.properties;
    const cord = object.geometry.coordinates;
    
    // create marker and add to map
    addMarker({
      latlng: {
        lat: cord[1],
        lng: cord[0]
      },
      display_name: display_name,
      address: address
    }, Date.now());

    // sets the view of the map
    map.setView([cord[1], cord[0]]);
  },

  // get index and data from li element after
  // hovering over li with the mouse or using
  // arrow keys ↓ | ↑
  onSelectedItem: ({ index, element, object }) => {
    // console.log("onSelectedItem:", index, element, object);
  },

  // the method presents no results element
  noResults: ({ currentValue, template }) =>
    template(`<li>Brak wyników dla: "${currentValue}"</li>`),
});